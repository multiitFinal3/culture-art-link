<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.multi.culture_link.admin.performance.mapper.PerformanceMapper">

    <select id="getAllPerformances" resultType="com.multi.culture_link.admin.performance.model.dto.PerformanceDTO">
        SELECT *
        FROM performance_info
    </select>

    <insert id="insertPerformance">
        INSERT INTO performance_info (id, code, title, status, start_date, end_date, location, region_id, casting, runtime, age, organizer, producer, price, image_main, image_detail1, image_detail2, image_detail3, image_detail4, genre, ticketing, ticketing_url, avg, created_at, updated_at)
        VALUES (#{id}, #{code}, #{title}, #{status}, #{startDate}, #{endDate}, #{location}, #{regionId}, #{casting}, #{runtime}, #{age}, #{organizer}, #{producer}, #{price}, #{imageMain}, #{imageDetail1}, #{imageDetail2}, #{imageDetail3}, #{imageDetail4}, #{genre}, #{ticketing}, #{ticketingUrl}, #{avg}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
    </insert>

    <delete id="deletePerformances">
        DELETE FROM performance_info
        WHERE code IN
        <foreach item="code" index="index" collection="list" open="(" separator="," close=")">
            #{code}
        </foreach>
    </delete>

    <select id="searchPerformances" resultType="com.multi.culture_link.admin.performance.model.dto.PerformanceDTO">
        SELECT *
        FROM performance_info
        WHERE title LIKE CONCAT('%', #{keyword}, '%')
        OR location LIKE CONCAT('%', #{keyword}, '%')
    </select>


    <select id="getPerformancesByGenre" parameterType="String" resultType="com.multi.culture_link.admin.performance.model.dto.PerformanceDTO">
        SELECT * FROM performance_info WHERE genre = #{genre}
    </select>


    <!--상세정보가져오려고-->
    <select id="getPerformanceByCode" parameterType="String" resultType="com.multi.culture_link.admin.performance.model.dto.PerformanceDTO">
        SELECT * FROM performance_info WHERE code = #{performanceCode}
    </select>

    <select id="getPerformanceByTitle" parameterType="String" resultType="com.multi.culture_link.admin.performance.model.dto.PerformanceDTO">
        SELECT * FROM performance_info WHERE title = #{performanceTitle}
    </select>






    <!-- 좋아요 싫어요 -->
    <select id="findByUserIdAndPerformanceId" parameterType="map" resultType="com.multi.culture_link.performance.model.dto.PerformanceAddDTO">
        SELECT * FROM performance_add WHERE user_id = #{userId} AND performance_id = #{performanceId}
    </select>

    <update id="updatePerformanceAdd" parameterType="com.multi.culture_link.performance.model.dto.PerformanceAddDTO">
        UPDATE performance_add
        SET state = #{state}, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <insert id="insertPerformanceAdd" parameterType="com.multi.culture_link.performance.model.dto.PerformanceAddDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO performance_add (user_id, performance_id, state, created_at, updated_at)
        VALUES (#{userId}, #{performanceId}, #{state}, NOW(), NOW())
    </insert>

    <select id="getPerformanceLikeState" parameterType="map" resultType="String">
        SELECT state FROM performance_add WHERE user_id = #{userId} AND performance_id = #{performanceId}
    </select>






    <!--  keyword와 genre로 공연 검색 -->
    <select id="searchPerformancesByKeywordAndGenre" resultType="com.multi.culture_link.admin.performance.model.dto.PerformanceDTO">
        SELECT *
        FROM performance_info
        WHERE (title LIKE CONCAT('%', #{keyword}, '%')
        OR location LIKE CONCAT('%', #{keyword}, '%'))
        AND genre = #{genre}
    </select>










    <select id="findReviewsByPerformanceId" resultType="com.multi.culture_link.performance.model.dto.PerformanceReviewDTO">
        SELECT
        pr.id,
        pr.performance_id AS performanceId,
        pr.user_id AS userId,
        pr.star_rating AS starRating,
        pr.content,
        pr.review_date AS reviewDate,
        pr.created_at AS createdAt,
        pr.updated_at AS updatedAt,
        u.user_name AS userName,
        u.user_profile_pic AS userProfileImage
        FROM
        performance_review pr
        JOIN
        user u ON pr.user_id = u.user_id
        WHERE
        pr.performance_id = #{performanceId}
    </select>

    <insert id="insertReview" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO performance_review (user_id, performance_id, star_rating, content, review_date, created_at, updated_at)
        VALUES (#{userId}, #{performanceId}, #{starRating}, #{content}, #{reviewDate}, NOW(), NOW())
    </insert>

    <update id="updateReview">
        UPDATE performance_review
        SET star_rating = #{starRating},
        content = #{content},
        updated_at = NOW()
        WHERE id = #{id}
    </update>

    <delete id="deleteReview">
        DELETE FROM performance_review WHERE id = #{id}
    </delete>









    <!--추천-->
    <select id="findRecommendedPerformances" resultType="com.multi.culture_link.admin.performance.model.dto.PerformanceDTO">
        SELECT
        p.id, p.code, p.title, p.location, p.casting, p.genre, p.image_main, p.start_date, p.end_date
        FROM
        performance_info p
        WHERE
        p.start_date > NOW()
        AND p.genre = #{genre}
        AND (
        p.location IN (
        SELECT DISTINCT pi.location
        FROM performance_add pa
        JOIN performance_info pi ON pa.performance_id = pi.id
        WHERE pa.user_id = #{userId} AND pa.state = 'like'
        )
        OR p.casting IN (
        SELECT DISTINCT pi.casting
        FROM performance_add pa
        JOIN performance_info pi ON pa.performance_id = pi.id
        WHERE pa.user_id = #{userId} AND pa.state = 'like'
        )
        )
        AND p.id NOT IN (
        SELECT pa.performance_id
        FROM performance_add pa
        WHERE pa.user_id = #{userId}
        )
        ORDER BY RAND() -- 무작위로 선택
        LIMIT 3 -- 각 장르에서 최대 3개 선택
    </select>








    <!-- 특정 사용자가 좋아요(찜)한 공연 목록을 가져오는 쿼리 -->
    <select id="findLovedPerformancesByUserId" resultType="com.multi.culture_link.admin.performance.model.dto.PerformanceDTO">
        SELECT
        p.id AS id,
        p.code AS code,
        p.title AS title,
        p.genre AS genre,
        p.start_date AS startDate,
        p.end_date AS endDate,
        p.location AS location,
        p.image_main AS imageMain
        FROM
        performance_add pa
        INNER JOIN performance_info p ON pa.performance_id = p.id
        WHERE
        pa.user_id = #{userId}
        AND pa.state = 'like'
    </select>


    <!-- 특정 사용자가 관심없음한 공연 목록을 가져오는 쿼리 -->
    <select id="findHatedPerformancesByUserId" resultType="com.multi.culture_link.admin.performance.model.dto.PerformanceDTO">
        SELECT
        p.id AS id,
        p.code AS code,
        p.title AS title,
        p.genre AS genre,
        p.start_date AS startDate,
        p.end_date AS endDate,
        p.location AS location,
        p.image_main AS imageMain
        FROM
        performance_add pa
        INNER JOIN performance_info p ON pa.performance_id = p.id
        WHERE
        pa.user_id = #{userId}
        AND pa.state = 'not like'
    </select>





    <!-- 사용자 ID로 리뷰 조회 -->
<!--    <select id="findReviewsByUserId" parameterType="int" resultType="com.multi.culture_link.performance.model.dto.PerformanceReviewDTO">-->
<!--        SELECT * FROM performance_review-->
<!--        WHERE user_id = #{userId}-->
<!--    </select>-->


<!--    <select id="findReviewsByUserId" parameterType="int" resultType="com.multi.culture_link.performance.model.dto.PerformanceReviewDTO">-->
<!--        SELECT-->
<!--        pr.id,-->
<!--        pr.performance_id AS performanceId,-->
<!--        pr.user_id AS userId,-->
<!--        pr.star_rating AS starRating,-->
<!--        pr.content,-->
<!--        pr.review_date AS reviewDate,-->
<!--        pr.created_at AS createdAt,-->
<!--        pr.updated_at AS updatedAt,-->
<!--        u.user_name AS userName,-->
<!--        u.user_profile_pic AS userProfileImage-->
<!--        FROM-->
<!--        performance_review pr-->
<!--        JOIN-->
<!--        user u ON pr.user_id = u.user_id-->
<!--        WHERE-->
<!--        pr.user_id = #{userId}-->
<!--    </select>-->


    <select id="findReviewsByUserId" parameterType="int" resultType="com.multi.culture_link.performance.model.dto.PerformanceReviewDTO">
        SELECT
        pr.id,
        pr.performance_id AS performanceId,
        pr.user_id AS userId,
        pr.star_rating AS starRating,
        pr.content,
        pr.review_date AS reviewDate,
        pr.created_at AS createdAt,
        pr.updated_at AS updatedAt,
        u.user_name AS userName,
        u.user_profile_pic AS userProfileImage,
        pi.code AS code  -- performance_info 테이블에서 code를 가져옴
        FROM
        performance_review pr
        JOIN
        user u ON pr.user_id = u.user_id
        JOIN
        performance_info pi ON pr.performance_id = pi.id  -- performance_info와 연결
        WHERE
        pr.user_id = #{userId}
    </select>









</mapper>